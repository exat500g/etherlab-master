From: Graeme Foot <Graeme.Foot@touchcut.com>
Date: Mon, 9 Nov 2015 05:02:14 +1300

Distributed Clock fixes from Jun Yuan

Sync signal generation

diff --git a/lib/master.c b/lib/master.c
--- a/lib/master.c
+++ b/lib/master.c
@@ -776,7 +776,7 @@
     ret = ioctl(master->fd, EC_IOCTL_REF_CLOCK_TIME, time);
     if (EC_IOCTL_IS_ERROR(ret)) {
         ret = EC_IOCTL_ERRNO(ret);
-        if (ret != EIO && ret != ENXIO) {
+        if (ret != EIO && ret != ENXIO && ret != EAGAIN) {
             // do not log if no refclk or no refclk time yet
             fprintf(stderr, "Failed to get reference clock time: %s\n",
                     strerror(ret));
diff --git a/master/datagram.c b/master/datagram.c
--- a/master/datagram.c
+++ b/master/datagram.c
@@ -102,6 +102,7 @@
     datagram->cycles_sent = 0;
 #endif
     datagram->jiffies_sent = 0;
+    datagram->app_time_sent = 0;
 #ifdef EC_HAVE_CYCLES
     datagram->cycles_received = 0;
 #endif
diff --git a/master/datagram.h b/master/datagram.h
--- a/master/datagram.h
+++ b/master/datagram.h
@@ -102,6 +102,7 @@
     cycles_t cycles_sent; /**< Time, when the datagram was sent. */
 #endif
     unsigned long jiffies_sent; /**< Jiffies, when the datagram was sent. */
+    uint64_t app_time_sent; /**< App time, when the datagram was sent. */
 #ifdef EC_HAVE_CYCLES
     cycles_t cycles_received; /**< Time, when the datagram was received. */
 #endif
diff --git a/master/fsm_master.c b/master/fsm_master.c
--- a/master/fsm_master.c
+++ b/master/fsm_master.c
@@ -48,7 +48,7 @@
 
 /** Time difference [ns] to tolerate without setting a new system time offset.
  */
-#define EC_SYSTEM_TIME_TOLERANCE_NS 10000
+#define EC_SYSTEM_TIME_TOLERANCE_NS 1000
 
 /*****************************************************************************/
 
@@ -411,6 +411,7 @@
         // application applied configurations
         if (master->config_changed) {
             master->config_changed = 0;
+            master->dc_offset_valid = 0;
 
             EC_MASTER_DBG(master, 1, "Configuration changed.\n");
 
@@ -775,6 +776,7 @@
 
     if (master->config_changed) {
         master->config_changed = 0;
+        master->dc_offset_valid = 0;
 
         // abort iterating through slaves,
         // first compensate DC system time offsets,
@@ -1148,6 +1150,7 @@
 
     if (master->slave_count) {
         master->config_changed = 0;
+        master->dc_offset_valid = 0;
 
         fsm->slave = master->slaves; // begin with first slave
         ec_fsm_master_enter_write_system_times(fsm);
@@ -1203,7 +1206,7 @@
 {
     ec_master_t *master = fsm->master;
 
-    if (master->has_app_time) {
+    if (master->active) {
 
         while (fsm->slave < master->slaves + master->slave_count) {
             if (!fsm->slave->base_dc_supported
@@ -1219,19 +1222,16 @@
             //     and time offset (0x0920, 64 bit)
             ec_datagram_fprd(fsm->datagram, fsm->slave->station_address,
                     0x0910, 24);
+            ec_datagram_zero(fsm->datagram);
             fsm->datagram->device_index = fsm->slave->device_index;
             fsm->retries = EC_FSM_RETRIES;
             fsm->state = ec_fsm_master_state_dc_read_offset;
             return;
         }
+        master->dc_offset_valid = 1;
 
     } else {
-        if (master->active) {
-            EC_MASTER_WARN(master, "No app_time received up to now,"
-                    " but master already active.\n");
-        } else {
-            EC_MASTER_DBG(master, 1, "No app_time received up to now.\n");
-        }
+        EC_MASTER_DBG(master, 1, "No app_time received up to now.\n");
     }
 
     // scanning and setting system times complete
@@ -1249,26 +1249,21 @@
         ec_fsm_master_t *fsm, /**< Master state machine. */
         u64 system_time, /**< System time register. */
         u64 old_offset, /**< Time offset register. */
-        unsigned long jiffies_since_read /**< Jiffies for correction. */
+        u64 app_time_sent /**< Master app time by reading. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    u32 correction, system_time32, old_offset32, new_offset;
+    u32 system_time32, old_offset32, new_offset;
     s32 time_diff;
 
     system_time32 = (u32) system_time;
     old_offset32 = (u32) old_offset;
 
-    // correct read system time by elapsed time since read operation
-    correction = jiffies_since_read * 1000 / HZ * 1000000;
-    system_time32 += correction;
-    time_diff = (u32) slave->master->app_time - system_time32;
+    time_diff = (u32) app_time_sent - system_time32;
 
     EC_SLAVE_DBG(slave, 1, "DC 32 bit system time offset calculation:"
-            " system_time=%u (corrected with %u),"
-            " app_time=%llu, diff=%i\n",
-            system_time32, correction,
-            slave->master->app_time, time_diff);
+            " system_time=%u, app_time=%llu, diff=%i\n",
+            system_time32, app_time_sent, time_diff);
 
     if (EC_ABS(time_diff) > EC_SYSTEM_TIME_TOLERANCE_NS) {
         new_offset = time_diff + old_offset32;
@@ -1291,23 +1286,18 @@
         ec_fsm_master_t *fsm, /**< Master state machine. */
         u64 system_time, /**< System time register. */
         u64 old_offset, /**< Time offset register. */
-        unsigned long jiffies_since_read /**< Jiffies for correction. */
+        u64 app_time_sent /**< Master app time by reading. */
         )
 {
     ec_slave_t *slave = fsm->slave;
-    u64 new_offset, correction;
+    u64 new_offset;
     s64 time_diff;
 
-    // correct read system time by elapsed time since read operation
-    correction = (u64) (jiffies_since_read * 1000 / HZ) * 1000000;
-    system_time += correction;
-    time_diff = fsm->slave->master->app_time - system_time;
+    time_diff = app_time_sent - system_time;
 
     EC_SLAVE_DBG(slave, 1, "DC 64 bit system time offset calculation:"
-            " system_time=%llu (corrected with %llu),"
-            " app_time=%llu, diff=%lli\n",
-            system_time, correction,
-            slave->master->app_time, time_diff);
+            " system_time=%llu, app_time=%llu, diff=%lli\n",
+            system_time, app_time_sent, time_diff);
 
     if (EC_ABS(time_diff) > EC_SYSTEM_TIME_TOLERANCE_NS) {
         new_offset = time_diff + old_offset;
@@ -1331,8 +1321,8 @@
 {
     ec_datagram_t *datagram = fsm->datagram;
     ec_slave_t *slave = fsm->slave;
+    ec_master_t *master = fsm->master;
     u64 system_time, old_offset, new_offset;
-    unsigned long jiffies_since_read;
 
     if (datagram->state == EC_DATAGRAM_TIMED_OUT && fsm->retries--)
         return;
@@ -1353,16 +1343,24 @@
         return;
     }
 
+    if (unlikely(!master->has_app_time)) {
+        EC_MASTER_WARN(master, "No app_time received up to now,"
+                    " abort DC time offset calculation.\n");
+        // scanning and setting system times complete
+        ec_master_request_op(master);
+        ec_fsm_master_restart(fsm);
+        return;
+    }
+
     system_time = EC_READ_U64(datagram->data);     // 0x0910
     old_offset = EC_READ_U64(datagram->data + 16); // 0x0920
-    jiffies_since_read = jiffies - datagram->jiffies_sent;
 
     if (slave->base_dc_range == EC_DC_32) {
         new_offset = ec_fsm_master_dc_offset32(fsm,
-                system_time, old_offset, jiffies_since_read);
+                system_time, old_offset, datagram->app_time_sent);
     } else {
         new_offset = ec_fsm_master_dc_offset64(fsm,
-                system_time, old_offset, jiffies_since_read);
+                system_time, old_offset, datagram->app_time_sent);
     }
 
     // set DC system time offset and transmission delay
diff --git a/master/fsm_slave_config.c b/master/fsm_slave_config.c
--- a/master/fsm_slave_config.c
+++ b/master/fsm_slave_config.c
@@ -1346,6 +1346,7 @@
 
     fsm->jiffies_start = jiffies;
     ec_datagram_fprd(datagram, slave->station_address, 0x092c, 4);
+    ec_datagram_zero(datagram);
     fsm->retries = EC_FSM_RETRIES;
     fsm->state = ec_fsm_slave_config_state_dc_sync_check;
 }
@@ -1404,11 +1405,12 @@
             if ((diff_ms < last_diff_ms) || (diff_ms >= (last_diff_ms + 100))) {
                 last_diff_ms = diff_ms;
                 EC_SLAVE_DBG(slave, 1, "Sync after %4lu ms: %10u ns\n",
-                        diff_ms, abs_sync_diff);
+                        diff_ms, EC_READ_U32(datagram->data) & 0x80000000 ? -abs_sync_diff: abs_sync_diff);
             }
 
             // check synchrony again
             ec_datagram_fprd(datagram, slave->station_address, 0x092c, 4);
+            ec_datagram_zero(datagram);
             fsm->retries = EC_FSM_RETRIES;
             return;
         }
diff --git a/master/fsm_slave_scan.c b/master/fsm_slave_scan.c
--- a/master/fsm_slave_scan.c
+++ b/master/fsm_slave_scan.c
@@ -885,6 +885,7 @@
          * sizes. */
         ec_datagram_fprd(fsm->datagram, slave->station_address, 0x0800,
                 EC_SYNC_PAGE_SIZE * 2);
+        ec_datagram_zero(fsm->datagram);
         fsm->retries = EC_FSM_RETRIES;
         fsm->state = ec_fsm_slave_scan_state_sync;
     }
diff --git a/master/master.c b/master/master.c
--- a/master/master.c
+++ b/master/master.c
@@ -181,6 +181,7 @@
     master->app_time = 0ULL;
     master->app_start_time = 0ULL;
     master->has_app_time = 0;
+    master->dc_offset_valid = 0;
 
     master->scan_busy = 0;
     master->allow_scan = 1;
@@ -1085,6 +1086,7 @@
             datagram->cycles_sent = cycles_sent;
 #endif
             datagram->jiffies_sent = jiffies_sent;
+            datagram->app_time_sent = master->app_time;
             list_del_init(&datagram->sent); // empty list of sent datagrams
         }
 
@@ -1230,14 +1232,17 @@
         datagram->working_counter = EC_READ_U16(cur_data);
         cur_data += EC_DATAGRAM_FOOTER_SIZE;
 
-        // dequeue the received datagram
-        datagram->state = EC_DATAGRAM_RECEIVED;
 #ifdef EC_HAVE_CYCLES
         datagram->cycles_received =
             master->devices[EC_DEVICE_MAIN].cycles_poll;
 #endif
         datagram->jiffies_received =
             master->devices[EC_DEVICE_MAIN].jiffies_poll;
+
+        barrier(); /* reordering might lead to races */
+
+        // dequeue the received datagram
+        datagram->state = EC_DATAGRAM_RECEIVED;
         list_del_init(&datagram->queue);
     }
 }
@@ -2372,6 +2377,7 @@
 
     // notify state machine, that the configuration shall now be applied
     master->config_changed = 1;
+    master->dc_offset_valid = 0;
 
     return 0;
 }
@@ -2477,6 +2483,13 @@
     master->app_time = 0ULL;
     master->app_start_time = 0ULL;
     master->has_app_time = 0;
+    master->dc_offset_valid = 0;
+
+    /* Disallow scanning to get into the same state like after a master
+     * request (after ec_master_enter_operation_phase() is called). */
+    master->allow_scan = 0;
+
+    master->active = 0;
 
 #ifdef EC_EOE
     if (eoe_was_running) {
@@ -2487,12 +2500,6 @@
                 "EtherCAT-IDLE")) {
         EC_MASTER_WARN(master, "Failed to restart master thread!\n");
     }
-
-    /* Disallow scanning to get into the same state like after a master
-     * request (after ec_master_enter_operation_phase() is called). */
-    master->allow_scan = 0;
-
-    master->active = 0;
 }
 
 /*****************************************************************************/
@@ -2859,6 +2866,10 @@
         return -EIO;
     }
 
+    if (!master->dc_offset_valid) {
+        return -EAGAIN;
+    }
+
     // Get returned datagram time, transmission delay removed.
     *time = EC_READ_U32(master->sync_datagram.data) -
         master->dc_ref_clock->transmission_delay;
@@ -2870,7 +2881,7 @@
 
 void ecrt_master_sync_reference_clock(ec_master_t *master)
 {
-    if (master->dc_ref_clock) {
+    if (master->dc_ref_clock && master->dc_offset_valid) {
         EC_WRITE_U32(master->ref_sync_datagram.data, master->app_time);
         ec_master_queue_datagram(master, &master->ref_sync_datagram);
     }
@@ -2880,7 +2891,7 @@
 
 void ecrt_master_sync_slave_clocks(ec_master_t *master)
 {
-    if (master->dc_ref_clock) {
+    if (master->dc_ref_clock && master->dc_offset_valid) {
         ec_datagram_zero(&master->sync_datagram);
         ec_master_queue_datagram(master, &master->sync_datagram);
     }
diff --git a/master/master.h b/master/master.h
--- a/master/master.h
+++ b/master/master.h
@@ -238,6 +238,8 @@
     u64 app_time; /**< Time of the last ecrt_master_sync() call. */
     u64 app_start_time; /**< Application start time. */
     u8 has_app_time; /**< Application time is valid. */
+    u8 dc_offset_valid; /**< DC slaves have valid system time offsets*/
+
     ec_datagram_t ref_sync_datagram; /**< Datagram used for synchronizing the
                                        reference clock to the master clock. */
     ec_datagram_t sync_datagram; /**< Datagram used for DC drift
diff --git a/tool/CommandSdos.cpp b/tool/CommandSdos.cpp
--- a/tool/CommandSdos.cpp
+++ b/tool/CommandSdos.cpp
@@ -145,7 +145,13 @@
             continue;
 
         for (j = 0; j <= sdo.max_subindex; j++) {
-            m.getSdoEntry(&entry, slave.position, -i, j);
+            try {
+                m.getSdoEntry(&entry, slave.position, -i, j);
+            } catch (MasterDeviceException &e) {
+                /* There may be gaps in the subindices, so try to continue with next
+                 * subindex. */
+                continue;
+            }
 
             cout << "  0x" << hex << setfill('0')
                 << setw(4) << sdo.sdo_index << ":"
